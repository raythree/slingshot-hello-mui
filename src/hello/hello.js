import objectAssign from 'object-assign';
import Promise from 'bluebird';

const initialState = {
  pending: false,
  message: '',
  name: 'World',
  error: ''
};

/* eslint no-unused-vars: "off" */

const SAY_HELLO = 'helloapp/SAY_HELLO';
const SET_NAME  = 'helloapp/SET_NAME';

const SAY_HELLO_ASYNC = 'helloapp/SAY_HELLO_ASYNC';
// these are generated by redux promise resolver
const SAY_HELLO_ASYNC_REQUEST = 'helloapp/SAY_HELLO_ASYNC_REQUEST';
const SAY_HELLO_ASYNC_ERROR = 'helloapp/SAY_HELLO_ASYNC_ERROR';

function asyncHello() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve();
    }, 1000);
  });
}

export function sayHello() {
  "@action sayHello";
  return { type: SAY_HELLO };
}

export function sayHelloAsync() {
  "@action sayHelloAsync";
  return { type: SAY_HELLO_ASYNC, payload: asyncHello() };
}

export function setName(name) {
  "@action setName";
  return { type: SET_NAME, name, message: `Hello ${name}!!!` };
}

export default function reducer(state = initialState, action = {}) {
  let newState;
  switch (action.type) {
    case SAY_HELLO:
      newState = objectAssign({}, state, {message: `Hello ${state.name}!!!`});
      return newState;

    case SET_NAME:
      newState = objectAssign({}, state, {name: action.name, message: action.message});
      return newState;

    case SAY_HELLO_ASYNC_REQUEST:
      newState = objectAssign({}, state, {pending: true});
      return newState;

    case SAY_HELLO_ASYNC:
      newState = objectAssign({}, state, {message: `Hello ${state.name}!!!`}, {pending: false});
      return newState;

    case SAY_HELLO_ASYNC_ERROR:
      newState = objectAssign({}, state, {error: action.error}, {pending: false});
      return newState;

    default:
      return state;
  }
}
